{"version":3,"sources":["components/Upload.js","App.js","reportWebVitals.js","index.js","components/MainListItem.js","components/ReactGrid.js","components/Export.js","components/Dashboard.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","input","display","button","UploadButtons","fileReader","useContext","ContextContainer","setUserBackup","userBackup","setRows","rows","currentList","classes","setCurrentList","handleFileRead","e","arrayBuffer","Uint8Array","result","buffer","Buffer","bplist","parseBuffer","err","property","forEach","entries","index","id","className","accept","type","onChange","file","target","files","FileReader","onloadend","Blob","readAsArrayBuffer","htmlFor","variant","color","component","startIcon","App","Dashboard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","MainListItems","handleClick","name","ListItem","onClick","ListItemIcon","ListItemText","primary","getRowId","row","FocusableCell","restProps","Cell","tabIndex","onFocus","ReactGrid","useState","title","getCellValue","image","relative","undefined","link","columns","pageSizes","columnName","width","defaultColumnWidths","createRowChange","value","editingColumnExtensions","commitChanges","changedRows","added","changed","deleted","startingAddedId","length","map","deletedSet","Set","filter","has","newUserBackup","Paper","defaultValue","columnExtensions","onCommitChanges","addedRows","onAddedRowsChange","defaultSorting","direction","defaultCurrentPage","defaultPageSize","cellComponent","showSortingControls","selectTextOnEditStart","showAddCommand","showDeleteCommand","ExportButtons","downloadBlob","data","fileName","mimeType","blob","url","window","URL","createObjectURL","a","createElement","href","download","body","appendChild","style","click","remove","downloadURL","setTimeout","revokeObjectURL","Button","exportUserBackup","cloneDeep","Date","userBackupBuf","create","String","alert","handleExport","React","createContext","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","menuButtonHidden","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","breakpoints","up","appBarSpacer","content","height","overflow","container","paddingTop","paddingBottom","paper","flexDirection","open","setOpen","CssBaseline","AppBar","clsx","backgroundColor","Toolbar","IconButton","edge","aria-label","Typography","noWrap","Provider","Upload","Drawer","Divider","List","Container","maxWidth"],"mappings":"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","file":"static/js/main.5ab3e8e5.chunk.js","sourcesContent":["/**\r\n * File dealing with importing the backup.\r\n * This file is basically the import button \r\n * component at the top right\r\n */\r\nimport React, { useContext } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport { ContextContainer } from './Dashboard';\r\nimport bplist from 'bplist';\r\n\r\n// function recursiveParsePlist(object) {\r\n//   Object.keys(object).forEach(key => {\r\n//     if (typeof object[key] === \"object\") {\r\n//       recursiveParsePlist(object[key]);\r\n//     }\r\n//     if (object[key] instanceof Uint8Array) {\r\n//       bplist.parseBuffer(object[key], function (err, result) {\r\n//         if (!err) {\r\n//           object[key] = result;\r\n//           recursiveParsePlist(object[key]);\r\n//         }\r\n//       });\r\n//     }\r\n//   });\r\n// }\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: 'none',\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default function UploadButtons() {\r\n  // Accepts a context object, receiving the the value passed to ContextContainer.Provider\r\n  const { userBackup, setUserBackup } = useContext(ContextContainer);\r\n  const { rows, setRows } = useContext(ContextContainer);\r\n  const { currentList, setCurrentList } = useContext(ContextContainer);\r\n\r\n  const classes = useStyles();\r\n\r\n  let fileReader;\r\n\r\n  const handleFileRead = (e) => {\r\n    // Create the Uint8 Array from the uploaded file Array Buffer\r\n    let arrayBuffer = new Uint8Array(fileReader.result);\r\n    // Make it into a Buffer\r\n    let buffer = Buffer(arrayBuffer, \"binary\");\r\n\r\n    // parse the Plist\r\n    bplist.parseBuffer(buffer, function (err, userBackup) {\r\n      if (!err) {\r\n        for (const property in userBackup[0]) {\r\n          if (property === \"history\" || /* property === \"trackingData\" || */ property === \"subscriptions\") {\r\n            // Add a ID property to the object, neccessary for gird editing to work. Will remove them when exporting.\r\n            userBackup[0][property].forEach((entries, index) => { entries.id = index });\r\n          }\r\n        }\r\n        // set/save the userBackup object to userBackup context hook\r\n        setUserBackup(userBackup);\r\n        // set the Rows to the userBackup currentList (default: history)\r\n        setRows(userBackup[0][currentList]);\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleFileChosen = (file) => {\r\n    fileReader = new FileReader();\r\n\r\n    fileReader.onloadend = handleFileRead;\r\n    if (fileReader && file instanceof Blob) {\r\n      fileReader.readAsArrayBuffer(file);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <input\r\n        accept=\".naconfig\"\r\n        className={classes.input}\r\n        id=\"contained-button-file\"\r\n        type=\"file\"\r\n        onChange={e => handleFileChosen(e.target.files[0])}\r\n      />\r\n      <label htmlFor=\"contained-button-file\">\r\n        <Button variant=\"contained\" color=\"primary\" component=\"span\" startIcon={<CloudUploadIcon />}>\r\n          Upload\r\n        </Button>\r\n      </label>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Dashboard from './components/Dashboard';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Dashboard/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import React, { useContext } from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport HistoryIcon from '@material-ui/icons/History';\r\n// import PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\r\n// import AssessmentIcon from '@material-ui/icons/Assessment';\r\nimport BookmarksIcon from '@material-ui/icons/Bookmarks';\r\nimport { ContextContainer } from './Dashboard';\r\n\r\nexport default function MainListItems() {\r\n  // Accepts a context object, receiving the the value passed to ContextContainer.Provider\r\n  const { userBackup, setUserBackup } = useContext(ContextContainer);\r\n  const { rows, setRows } = useContext(ContextContainer);\r\n  const { currentList, setCurrentList } = useContext(ContextContainer);\r\n\r\n  const handleClick = (name) => {\r\n    // Set the currentList variable to name\r\n    setCurrentList(name);\r\n    \r\n    if (userBackup[0]) {\r\n      // Set the rows to the current name property of userBackup \r\n      setRows(userBackup[0][name]);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <ListItem button onClick={() => handleClick('history')} >\r\n        <ListItemIcon>\r\n          <HistoryIcon />\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"History\" />\r\n      </ListItem>\r\n      {/* <ListItem button onClick={() => handleClick('progresses')}>\r\n        <ListItemIcon>\r\n          <PlayCircleFilledIcon />\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Progresses\" />\r\n      </ListItem> \r\n      <ListItem button onClick={() => handleClick('trackingData')}>\r\n        <ListItemIcon>\r\n          <AssessmentIcon />\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Tracking Data\" />\r\n      </ListItem> */}\r\n      <ListItem button onClick={() => handleClick('subscriptions')}>\r\n        <ListItemIcon>\r\n          <BookmarksIcon />\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Subscriptions\" />\r\n      </ListItem>\r\n    </div>\r\n  );\r\n};","/**\r\n * File dealing with the grid/table\r\n * Doucmentation: https://devexpress.github.io/devextreme-reactive/react/grid/docs/\r\n */\r\nimport React, { useState, useContext } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {\r\n  SortingState,\r\n  IntegratedSorting,\r\n  SearchState,\r\n  IntegratedFiltering,\r\n  EditingState,\r\n  PagingState,\r\n  IntegratedPaging,\r\n} from '@devexpress/dx-react-grid';\r\nimport {\r\n  Grid,\r\n  Table,\r\n  Toolbar,\r\n  SearchPanel,\r\n  TableHeaderRow,\r\n  TableColumnResizing,\r\n  TableEditColumn,\r\n  TableInlineCellEditing,\r\n  PagingPanel,\r\n} from '@devexpress/dx-react-grid-material-ui';\r\nimport { ContextContainer } from './Dashboard'\r\n\r\nconst getRowId = row => row.id;\r\n\r\nconst FocusableCell = ({ onClick, ...restProps }) => (\r\n  <Table.Cell {...restProps} tabIndex={0} onFocus={onClick} />\r\n);\r\n\r\nexport default function ReactGrid() {\r\n  // Accepts a context object, receiving the the value passed to ContextContainer.Provider\r\n  const { userBackup, setUserBackup } = useContext(ContextContainer);\r\n  const { currentList, setCurrentList } = useContext(ContextContainer);\r\n  const { rows, setRows } = useContext(ContextContainer);\r\n\r\n  // The columns of the grid\r\n  const [columns] = useState([\r\n    {\r\n      name: 'title', title: 'Title'\r\n    },\r\n    {\r\n      name: 'source', title: 'Source'\r\n    },\r\n    {\r\n      name: 'image', title: 'Image',\r\n      // This allow us to retrieve nested object\r\n      getCellValue: (row) => (row.image ? row.image.relative : undefined)\r\n    },\r\n    {\r\n      name: 'link', title: 'Link',\r\n      // This allow us to retrieve nested object\r\n      getCellValue: (row) => (row.link ? row.link.relative : undefined)\r\n    },\r\n  ]);\r\n  const [pageSizes] = useState([25, 50, 100, 0]);\r\n  // Set a defaultColumnWidth for resizing the columns\r\n  const [defaultColumnWidths] = useState([\r\n    { columnName: 'title', width: 200 },\r\n    { columnName: 'source', width: 150 },\r\n    { columnName: 'image', width: 350 },\r\n    { columnName: 'link', width: 350 },\r\n  ]);\r\n  const [editingColumnExtensions] = useState([\r\n    {\r\n      columnName: 'image',\r\n      createRowChange: (row, value) => ({ image: { ...row.image, relative: value } }),\r\n    },\r\n    {\r\n      columnName: 'link',\r\n      createRowChange: (row, value) => ({ link: { ...row.link, relative: value } }),\r\n    },\r\n  ]);\r\n\r\n  const commitChanges = ({ added, changed, deleted }) => {\r\n    let changedRows;\r\n    if (added) {\r\n      const startingAddedId = rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\r\n      changedRows = [\r\n        ...rows,\r\n        ...added.map((row, index) => ({\r\n          id: startingAddedId + index,\r\n          ...row,\r\n        })),\r\n      ];\r\n    }\r\n    if (changed) {\r\n      changedRows = rows.map(row => (changed[row.id] ? { ...row, ...changed[row.id] } : row));\r\n    }\r\n    if (deleted) {\r\n      const deletedSet = new Set(deleted);\r\n      changedRows = rows.filter(row => !deletedSet.has(row.id));\r\n    }\r\n\r\n    setRows(changedRows);\r\n\r\n    if (userBackup.length) {\r\n      let newUserBackup = [...userBackup]\r\n      newUserBackup[0][currentList] = changedRows;\r\n\r\n      setUserBackup(newUserBackup)\r\n    }\r\n  };\r\n\r\n  const addEmptyRow = () => commitChanges({ added: [{}] });\r\n\r\n  return (\r\n    <Paper>\r\n      <Grid\r\n        rows={rows}\r\n        columns={columns}\r\n        getRowId={getRowId}\r\n      >\r\n        <SearchState defaultValue=\"\" />\r\n        <IntegratedFiltering />\r\n        <EditingState\r\n          columnExtensions={editingColumnExtensions}\r\n          onCommitChanges={commitChanges}\r\n          addedRows={[]}\r\n          onAddedRowsChange={addEmptyRow}\r\n        />\r\n        <SortingState\r\n          defaultSorting={[{ columnName: 'title', direction: 'asc' }]}\r\n        />\r\n        <IntegratedSorting />\r\n        <PagingState\r\n          defaultCurrentPage={0}\r\n          defaultPageSize={25}\r\n        />\r\n        <IntegratedPaging />\r\n        <Table cellComponent={FocusableCell} />\r\n        <TableColumnResizing defaultColumnWidths={defaultColumnWidths} />\r\n        <TableHeaderRow showSortingControls />\r\n        <PagingPanel pageSizes={pageSizes} />\r\n        <TableInlineCellEditing selectTextOnEditStart />\r\n        <TableEditColumn\r\n          showAddCommand\r\n          showDeleteCommand\r\n        />\r\n        <Toolbar />\r\n        <SearchPanel />\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n","/**\r\n * File dealing with exporting the backup.\r\n * This file is basically the export button \r\n * component at the top right\r\n */\r\nimport React, { useContext } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport { ContextContainer } from './Dashboard'\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport bplist from 'bplist';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    input: {\r\n        display: 'none',\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}));\r\n\r\nexport default function ExportButtons() {\r\n    // Accepts a context object, receiving the the value passed to ContextContainer.Provider\r\n    const { userBackup, setUserBackup } = useContext(ContextContainer);\r\n\r\n    const classes = useStyles();\r\n\r\n    const downloadURL = (data, fileName) => {\r\n        const a = document.createElement('a');\r\n        a.href = data;\r\n        a.download = fileName;\r\n        document.body.appendChild(a);\r\n        a.style.display = 'none';\r\n        a.click();\r\n        a.remove();\r\n    }\r\n\r\n    const downloadBlob = (data, fileName, mimeType) => {\r\n        // create a Blob from our buffer\r\n        const blob = new Blob([data], {\r\n            type: mimeType\r\n        });\r\n\r\n        const url = window.URL.createObjectURL(blob);\r\n\r\n        downloadURL(url, fileName);\r\n\r\n        setTimeout(() => window.URL.revokeObjectURL(url), 1000);\r\n    }\r\n\r\n    const handleExport = () => {\r\n        if (userBackup[0]) {\r\n            // Cloning using Lodash library clonedeep as JavaScript ES6 sucks\r\n            let exportUserBackup = cloneDeep(userBackup)\r\n\r\n            // Replaces the exportedDate in the NineAnimator backup with current date \r\n            exportUserBackup[0][\"exportedDate\"] = new Date();\r\n\r\n            for (const property in exportUserBackup[0]) {\r\n                if (property === \"history\" || /* property === \"trackingData\" || */ property === \"subscriptions\") {\r\n                    // delete the id property that was addded when importing\r\n                    exportUserBackup[0][property].forEach((entries) => { delete entries.id });\r\n                }\r\n            }\r\n\r\n            // Creating the Plist buffer \r\n            let userBackupBuf = bplist.create(exportUserBackup);\r\n            \r\n            // Creating the file\r\n            downloadBlob(userBackupBuf, `${String(exportUserBackup[0][\"exportedDate\"])}.naconfig`, 'application/octet-stream');\r\n        } else {\r\n            alert(\"Import a file first\");\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <label>\r\n                <Button variant=\"contained\" color=\"primary\" component=\"span\" startIcon={<GetAppIcon />} onClick={() => handleExport()}>\r\n                    Export\r\n                </Button>\r\n            </label>\r\n        </div>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Container from '@material-ui/core/Container';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport MainListItems from './MainListItem';\r\nimport ReactGrid from './ReactGrid';\r\nimport UploadButtons from './Upload';\r\nimport ExportButtons from './Export';\r\n\r\nconst drawerWidth = 240;\r\n\r\n// Create context container in a global scope so it can be visible by every component\r\nexport const ContextContainer = React.createContext(null);\r\n\r\n// Themes\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: 'hidden',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n}));\r\n\r\nexport default function Dashboard() {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(true);\r\n\r\n  // Creating \"global\" variables for other react components to use\r\n  const [userBackup, setUserBackup] = useState([]);\r\n  const [rows, setRows] = useState([]); // Rows of the grid, will be populated by userBackup\r\n  const [currentList, setCurrentList] = useState(\"history\"); // Track current list user has clicked, default: history\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)} style={{ backgroundColor: \"#673ab7\" }}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n            NineAnimator Backup Viewer\r\n          </Typography>\r\n          {/* ContextContainer allows us pass States to other components */}\r\n          <ContextContainer.Provider value={{ userBackup, setUserBackup, currentList, setCurrentList, rows, setRows }}>\r\n            <IconButton color=\"inherit\" >\r\n              {/* The Export.js component */}\r\n              <ExportButtons />\r\n            </IconButton>\r\n            <IconButton color=\"inherit\">\r\n              {/* The Upload.js component */}\r\n              <UploadButtons />\r\n            </IconButton>\r\n          </ContextContainer.Provider>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          {/* ContextContainer allows us pass States to other components */}\r\n          <ContextContainer.Provider value={{ userBackup, setUserBackup, currentList, setCurrentList, rows, setRows }}>\r\n            {/* The MainListItem.js component, the side navbar */}\r\n            <MainListItems />\r\n          </ContextContainer.Provider>\r\n        </List>\r\n        <Divider />\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          {/* ContextContainer allows us pass States to other components */}\r\n          <ContextContainer.Provider value={{ userBackup, setUserBackup, currentList, setCurrentList, rows, setRows }}>\r\n            {/* The ReactGrid.js component, the grid */}\r\n            <ReactGrid />\r\n          </ContextContainer.Provider>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}"],"sourceRoot":""}